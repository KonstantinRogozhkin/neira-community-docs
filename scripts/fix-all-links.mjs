import fs from 'fs';
import path from 'path';

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ Markdown —Ñ–∞–π–ª–∞—Ö.
 * @param {string} dir - –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
 */
const fixAllLinksInDirectory = (dir) => {
  const entries = fs.readdirSync(dir, { withFileTypes: true });

  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    if (entry.isDirectory()) {
      fixAllLinksInDirectory(fullPath);
    } else if (entry.isFile() && (entry.name.endsWith('.md') || entry.name.endsWith('.mdx'))) {
      let content = fs.readFileSync(fullPath, 'utf8');
      let changed = false;
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å—Å—ã–ª–æ–∫
      
      // 1. –°—Å—ã–ª–∫–∏ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –≤ –Ω–∞—á–∞–ª–µ
      content = content.replace(
        /\[([^\]]+)\]\(\/(\d+-[^)]+)\)/g,
        (match, text, path) => {
          changed = true;
          // –£–¥–∞–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏–∑ –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø—É—Ç–∏
          const cleanPath = path.split('/').map(segment => segment.replace(/^\d+-/, '')).join('/');
          return `[${text}](/${cleanPath})`;
        }
      );
      
      // 2. –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
      content = content.replace(
        /\[([^\]]+)\]\(((\.\.?\/)*\d+-[^)]+\.mdx?)\)/g,
        (match, text, relativePath) => {
          // –°–æ–∑–¥–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
          const absolutePath = path.resolve(path.dirname(fullPath), relativePath);
          const docRoot = path.join(process.cwd(), 'docs');
          let docusaurusPath = path.relative(docRoot, absolutePath).replace(/\\/g, '/').replace(/\.mdx?$/, '');
          
          // –£–¥–∞–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏–∑ –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø—É—Ç–∏
          docusaurusPath = docusaurusPath.split('/').map(segment => {
            return segment.replace(/^\d+-/, '');
          }).join('/');
          
          changed = true;
          return `[${text}](/${docusaurusPath})`;
        }
      );
      
      // 3. –°—Å—ã–ª–∫–∏ –Ω–∞ docs/README - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å
      content = content.replace(
        /\[([^\]]+)\]\(\/neira-super-app-2\/docs\/README\)/g,
        (match, text) => {
          changed = true;
          return `[${text}](/)`;
        }
      );
      
      // 4. –î—Ä—É–≥–∏–µ —Å—Å—ã–ª–∫–∏ —Å –±–∞–∑–æ–≤—ã–º URL, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
      content = content.replace(
        /\[([^\]]+)\]\(\/neira-super-app-2\/(\d+-[^)]+)\)/g,
        (match, text, path) => {
          changed = true;
          // –£–¥–∞–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏–∑ –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø—É—Ç–∏
          const cleanPath = path.split('/').map(segment => segment.replace(/^\d+-/, '')).join('/');
          return `[${text}](/${cleanPath})`;
        }
      );
      
      // 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–π–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, ../packages/...)
      content = content.replace(
        /\[([^\]]+)\]\(\/neira-super-app-2\/\.\.\/([^)]+)\)/g,
        (match, text, externalPath) => {
          changed = true;
          return `[${text}](https://github.com/neira-org/neira-super-app-2/tree/main/${externalPath})`;
        }
      );
      
      // 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ templates
      content = content.replace(
        /\[([^\]]+)\]\(\/neira-super-app-2\/templates\/([^)]+)\)/g,
        (match, text, templatePath) => {
          changed = true;
          return `[${text}](https://github.com/neira-org/neira-super-app-2/tree/main/templates/${templatePath})`;
        }
      );
      
      // 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ ROADMAP –∏ –¥—Ä—É–≥–∏–µ –∫–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã
      content = content.replace(
        /\[([^\]]+)\]\(\/neira-super-app-2\/\.\.\/([A-Z]+)\)/g,
        (match, text, fileName) => {
          changed = true;
          return `[${text}](https://github.com/neira-org/neira-super-app-2/blob/main/${fileName})`;
        }
      );

      // 8. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ (—Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å!)
      content = content.replace(
        /\[([^\]]+)\]\(([a-z][a-z-]+\/[^)]+)\)/g,
        (match, text, relativePath) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ URL –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /
          if (!relativePath.startsWith('http') && !relativePath.startsWith('/')) {
            changed = true;
            // –î–µ–ª–∞–µ–º —Å—Å—ã–ª–∫—É –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –æ—Ç –∫–æ—Ä–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            return `[${text}](/${relativePath})`;
          }
          return match;
        }
      );

      // 9. –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π changelog
      content = content.replace(
        /\[([^\]]+)\]\(\.\/changelog\/[^)]+\)/g,
        (match, text) => {
          changed = true;
          return `**${text}**`; // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        }
      );

      if (changed) {
        fs.writeFileSync(fullPath, content, 'utf8');
        console.log(`‚úÖ Fixed links in: ${path.relative(process.cwd(), fullPath)}`);
      }
    }
  }
};

const DOCS_PATH = path.join(process.cwd(), 'docs');

console.log('üîß Fixing all broken links in documentation...');
fixAllLinksInDirectory(DOCS_PATH);
console.log('‚úÖ All links have been fixed!'); 